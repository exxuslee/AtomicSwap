package com.exxlexxlee.atomicswap.data.mapper

import com.example.atomicswap.core.database.SwapEntity
import com.exxlexxlee.atomicswap.domain.model.Blockchain
import com.exxlexxlee.atomicswap.domain.model.Swap
import com.exxlexxlee.atomicswap.domain.model.SwapState
import com.exxlexxlee.atomicswap.domain.model.Token
import com.exxlexxlee.atomicswap.domain.model.toStorageName
import java.math.BigDecimal

internal fun SwapEntity.toDomain() = Swap(
    id = id,
    timestamp = timestamp,
    takerId = takerId,
    makerId = makerId,
    swapState = SwapState.valueOf(swapState),
    takerToken = Token(
        id = takerTokenId,
        symbol = takerTokenSymbol,
        name = takerTokenName,
        iconUrl = takerTokenIconUrl,
        contractAddress = takerTokenContractAddress,
        blockchain = Blockchain.valueOf(takerTokenBlockchain),
        decimal = takerTokenDecimal.toInt()
    ),
    makerToken = Token(
        id = makerTokenId,
        symbol = makerTokenSymbol,
        name = makerTokenName,
        iconUrl = makerTokenIconUrl,
        contractAddress = makerTokenContractAddress,
        blockchain = Blockchain.valueOf(makerTokenBlockchain),
        decimal = makerTokenDecimal.toInt()
    ),
    takerRefundAddress = takerRefundAddress,
    takerRefundAddressId = takerRefundAddressId,
    makerRefundAddress = makerRefundAddress,
    makerRefundAddressId = makerRefundAddressId,
    takerRedeemAddress = takerRedeemAddress,
    takerRedeemAddressId = takerRedeemAddressId,
    makerRedeemAddress = makerRedeemAddress,
    makerRedeemAddressId = makerRedeemAddressId,
    secret = secret,
    secretHash = secretHash,
    takerRefundTime = takerRefundTime.toInt(),
    makerRefundTime = makerRefundTime.toInt(),
    takerSafeTxTime = takerSafeTxTime,
    makerSafeTxTime = makerSafeTxTime,
    takerSafeTx = takerSafeTx,
    makerSafeTx = makerSafeTx,
    takerRedeemTx = takerRedeemTx,
    makerRedeemTx = makerRedeemTx,
    takerRefundTx = takerRefundTx,
    makerRefundTx = makerRefundTx,
    takerSafeAmount = BigDecimal(takerSafeAmount),
    makerSafeAmount = BigDecimal(makerSafeAmount),
    makerExactAmount = BigDecimal(makerExactAmount),
    takerExactAmount = BigDecimal(takerExactAmount),
    makerStartAmount = BigDecimal(makerStartAmount),
    takerStartAmount = BigDecimal(takerStartAmount),
    makerFinalAmount = BigDecimal(makerFinalAmount),
    takerFinalAmount = BigDecimal(takerFinalAmount)
)

internal fun Swap.toEntity() = SwapEntity(
    id = id,
    timestamp = timestamp,
    takerId = takerId,
    makerId = makerId,
    swapState = swapState.name,
    takerTokenId = takerToken.id,
    takerTokenSymbol = takerToken.symbol,
    takerTokenName = takerToken.name,
    takerTokenIconUrl = takerToken.iconUrl,
    takerTokenContractAddress = takerToken.contractAddress,
    takerTokenBlockchain = takerToken.blockchain.toStorageName(),
    takerTokenDecimal = takerToken.decimal.toLong(),
    makerTokenId = makerToken.id,
    makerTokenSymbol = makerToken.symbol,
    makerTokenName = makerToken.name,
    makerTokenIconUrl = makerToken.iconUrl,
    makerTokenContractAddress = makerToken.contractAddress,
    makerTokenBlockchain = makerToken.blockchain.toStorageName(),
    makerTokenDecimal = makerToken.decimal.toLong(),
    takerRefundAddress = takerRefundAddress,
    takerRefundAddressId = takerRefundAddressId,
    makerRefundAddress = makerRefundAddress,
    makerRefundAddressId = makerRefundAddressId,
    takerRedeemAddress = takerRedeemAddress,
    takerRedeemAddressId = takerRedeemAddressId,
    makerRedeemAddress = makerRedeemAddress,
    makerRedeemAddressId = makerRedeemAddressId,
    secret = secret,
    secretHash = secretHash,
    takerRefundTime = takerRefundTime.toLong(),
    makerRefundTime = makerRefundTime.toLong(),
    takerSafeTxTime = takerSafeTxTime,
    makerSafeTxTime = makerSafeTxTime,
    takerSafeTx = takerSafeTx,
    makerSafeTx = makerSafeTx,
    takerRedeemTx = takerRedeemTx,
    makerRedeemTx = makerRedeemTx,
    takerRefundTx = takerRefundTx,
    makerRefundTx = makerRefundTx,
    takerSafeAmount = takerSafeAmount.toPlainString(),
    makerSafeAmount = makerSafeAmount.toPlainString(),
    makerExactAmount = makerExactAmount.toPlainString(),
    takerExactAmount = takerExactAmount.toPlainString(),
    makerStartAmount = makerStartAmount.toPlainString(),
    takerStartAmount = takerStartAmount.toPlainString(),
    makerFinalAmount = makerFinalAmount.toPlainString(),
    takerFinalAmount = takerFinalAmount.toPlainString()
)