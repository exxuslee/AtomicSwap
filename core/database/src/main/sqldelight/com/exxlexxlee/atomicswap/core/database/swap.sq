import kotlin.Boolean;
import kotlin.Int;
import kotlin.String;
import kotlin.collections.List;

CREATE TABLE IF NOT EXISTS MakeEntity (
    makeId TEXT NOT NULL PRIMARY KEY,
    makerId TEXT NOT NULL,
    makerRefundAddress TEXT NOT NULL,
    makerRedeemAddress TEXT NOT NULL,
    makerExactAmount TEXT NOT NULL,
    takerExactAmount TEXT NOT NULL,
    makerStartAmount TEXT NOT NULL,
    takerStartAmount TEXT NOT NULL,

    -- Maker Token
    makerTokenCoinId TEXT NOT NULL,
    makerTokenCoinSymbol TEXT NOT NULL,
    makerTokenCoinName TEXT NOT NULL,
    makerTokenCoinIconUrl TEXT NOT NULL,
    makerTokenContractAddress TEXT,
    makerTokenBlockchain TEXT NOT NULL,
    makerTokenDecimal INTEGER NOT NULL,

    -- Taker Token
    takerTokenCoinId TEXT NOT NULL,
    takerTokenCoinSymbol TEXT NOT NULL,
    takerTokenCoinName TEXT NOT NULL,
    takerTokenCoinIconUrl TEXT NOT NULL,
    takerTokenContractAddress TEXT,
    takerTokenBlockchain TEXT NOT NULL,
    takerTokenDecimal INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS TakeEntity (
    takeId TEXT NOT NULL PRIMARY KEY,
    takerId TEXT NOT NULL,
    takerRefundAddress TEXT NOT NULL,
    takerRedeemAddress TEXT NOT NULL,
    makerFinalAmount TEXT NOT NULL,
    takerFinalAmount TEXT NOT NULL,
    makeId TEXT NOT NULL,
    FOREIGN KEY (makeId) REFERENCES MakeEntity(makeId) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS SwapEntity (
    swapId TEXT NOT NULL PRIMARY KEY,
    timestamp INTEGER NOT NULL,
    swapState INTEGER NOT NULL,
    isRead INTEGER AS Boolean NOT NULL DEFAULT 0,

    makeId TEXT NOT NULL,
    takeId TEXT,

    -- Address IDs
    takerRefundAddressId TEXT,
    makerRefundAddressId TEXT,
    takerRedeemAddressId TEXT,
    makerRedeemAddressId TEXT,

    -- Secret data
    secret TEXT,
    secretHash TEXT NOT NULL,

    -- Refund times
    takerRefundTime INTEGER NOT NULL,
    makerRefundTime INTEGER NOT NULL,
    takerSafeTxTime INTEGER,
    makerSafeTxTime INTEGER,

    -- Transaction hashes
    takerSafeTx TEXT,
    makerSafeTx TEXT,
    takerRedeemTx TEXT,
    makerRedeemTx TEXT,
    takerRefundTx TEXT,
    makerRefundTx TEXT,

    -- Amounts
    takerSafeAmount TEXT NOT NULL,
    makerSafeAmount TEXT NOT NULL,

    FOREIGN KEY (makeId) REFERENCES MakeEntity(makeId) ON DELETE CASCADE
);

selectAll:
SELECT * FROM SwapEntity ORDER BY timestamp DESC;

selectByIdFull:
SELECT * FROM SwapEntity WHERE swapId = ?;

selectMakeById:
SELECT * FROM MakeEntity WHERE makeId = ?;

selectTakesByMakeId:
SELECT * FROM TakeEntity WHERE makeId = ?;

selectTakeById:
SELECT * FROM TakeEntity WHERE takeId = ?;

insert:
INSERT OR REPLACE INTO SwapEntity (
    swapId, timestamp, swapState, isRead,
    makeId, takeId,
    takerRefundAddressId, makerRefundAddressId, takerRedeemAddressId, makerRedeemAddressId,
    secret, secretHash,
    takerRefundTime, makerRefundTime, takerSafeTxTime, makerSafeTxTime,
    takerSafeTx, makerSafeTx, takerRedeemTx, makerRedeemTx, takerRefundTx, makerRefundTx,
    takerSafeAmount, makerSafeAmount
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

insertMake:
INSERT OR REPLACE INTO MakeEntity (
    makeId, makerId, makerRefundAddress, makerRedeemAddress,
    makerExactAmount, takerExactAmount, makerStartAmount, takerStartAmount,
    makerTokenCoinId, makerTokenCoinSymbol, makerTokenCoinName, makerTokenCoinIconUrl,
    makerTokenContractAddress, makerTokenBlockchain, makerTokenDecimal,
    takerTokenCoinId, takerTokenCoinSymbol, takerTokenCoinName, takerTokenCoinIconUrl,
    takerTokenContractAddress, takerTokenBlockchain, takerTokenDecimal
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

insertTake:
INSERT OR REPLACE INTO TakeEntity (
    takeId, takerId, takerRefundAddress, takerRedeemAddress,
    makerFinalAmount, takerFinalAmount, makeId
) VALUES (?, ?, ?, ?, ?, ?, ?);

deleteById:
DELETE FROM SwapEntity WHERE swapId = ?;

deleteHistory:
DELETE FROM SwapEntity WHERE swapState IN (7, 0);

